import { useState, useEffect } from "react";
import { useMutation, useAction } from "convex/react";
import { api } from "../../convex/_generated/api";
import { Id } from "../../convex/_generated/dataModel";
import { toast } from "sonner";
import { GeneratingLoader } from "./GeneratingLoader";

interface ChatPanelProps {
  selectedConversationId: Id<"conversations"> | null;
  onConversationSelect: (id: Id<"conversations">) => void;
  businessContext: {
    businessName: string;
    websiteUrl: string | null;
  } | null;
}

export function ChatPanel({ selectedConversationId, onConversationSelect, businessContext }: ChatPanelProps) {
  const [websiteUrl, setWebsiteUrl] = useState("");
  const [setupStep, setSetupStep] = useState<"website-url" | "generating">("generating");
  const [isGenerating, setIsGenerating] = useState(false);
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);

  const createConversation = useMutation(api.conversations.createConversation);
  const generateSpec = useAction(api.ai.generateWebsiteSpec);

  // Auto-generate spec when business context is provided with website URL
  useEffect(() => {
    if (businessContext && businessContext.websiteUrl && !hasAutoGenerated && !selectedConversationId) {
      setHasAutoGenerated(true);
      handleAutoGenerate();
    } else if (businessContext && !businessContext.websiteUrl && !selectedConversationId) {
      setSetupStep("website-url");
      setWebsiteUrl("");
    }
  }, [businessContext, hasAutoGenerated, selectedConversationId]);

  const handleAutoGenerate = async () => {
    if (!businessContext || !businessContext.websiteUrl) return;

    try {
      setIsGenerating(true);
      setSetupStep("generating");

      const defaultMessage = `Create a comprehensive website specification for ${businessContext.businessName}`;
      const title = businessContext.businessName;

      const conversationId = await createConversation({
        title,
        initialMessage: defaultMessage,
        businessName: businessContext.businessName,
        websiteUrl: businessContext.websiteUrl,
      });

      onConversationSelect(conversationId);

      // Generate spec with all parallel data fetching
      await generateSpec({
        conversationId,
        userInput: defaultMessage,
      });

      setIsGenerating(false);
      toast.success("Specification generated!");
    } catch (error) {
      console.error("Error generating specification:", error);
      toast.error("Failed to generate specification");
      setIsGenerating(false);
    }
  };


  const handleContinueWithWebsite = async () => {
    if (!websiteUrl.trim()) {
      toast.error("Please enter a website URL");
      return;
    }

    try {
      setIsGenerating(true);
      setSetupStep("generating");

      const defaultMessage = businessContext?.businessName
        ? `Create a comprehensive website specification for ${businessContext.businessName}`
        : "Create a comprehensive website specification for this business";
      const title = businessContext?.businessName || websiteUrl.slice(0, 50);

      const conversationId = await createConversation({
        title,
        initialMessage: defaultMessage,
        businessName: businessContext?.businessName || undefined,
        websiteUrl: websiteUrl.trim(),
      });

      onConversationSelect(conversationId);

      // Generate spec with all parallel data fetching
      await generateSpec({
        conversationId,
        userInput: defaultMessage,
      });

      setIsGenerating(false);
      toast.success("Specification generated!");
    } catch (error) {
      console.error("Error generating specification:", error);
      toast.error("Failed to generate specification");
      setIsGenerating(false);
    }
  };


  return (
    <div className="flex flex-col h-full">
      {/* Business Information */}
      {businessContext && (
        <div className="border-b border-gray-200 p-6 bg-white">
          <h3 className="text-lg font-semibold text-gray-800 mb-2">Business Info</h3>
          <div className="space-y-1 text-sm text-gray-600">
            <p><span className="font-medium">Name:</span> {businessContext.businessName}</p>
            {businessContext.websiteUrl && (
              <p>
                <span className="font-medium">Website:</span>{" "}
                <a
                  href={businessContext.websiteUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-primary hover:underline"
                >
                  {businessContext.websiteUrl}
                </a>
              </p>
            )}
          </div>
        </div>
      )}

      {/* Main Content Area */}
      <div className="flex-1 overflow-hidden">
        {setupStep === "website-url" ? (
          /* Website URL Input (if website not found on landing page) */
          <div className="p-6">
            <h3 className="text-lg font-semibold mb-4">Website URL Needed</h3>
            <div className="space-y-3">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Website URL
                </label>
                <input
                  type="text"
                  value={websiteUrl}
                  onChange={(e) => setWebsiteUrl(e.target.value)}
                  placeholder="e.g., https://www.example.com"
                  className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                  disabled={isGenerating}
                  onKeyDown={(e) => {
                    if (e.key === "Enter" && websiteUrl.trim()) {
                      e.preventDefault();
                      handleContinueWithWebsite();
                    }
                  }}
                  autoFocus
                />
                <p className="mt-2 text-xs text-gray-500">
                  We'll scrape this website and generate SEO analysis
                </p>
              </div>
              <button
                onClick={handleContinueWithWebsite}
                disabled={!websiteUrl.trim() || isGenerating}
                className="w-full px-4 py-3 bg-primary text-white rounded-lg hover:bg-primary-hover transition-colors disabled:opacity-50 disabled:cursor-not-allowed font-medium"
              >
                {isGenerating ? (
                  <div className="flex items-center justify-center space-x-2">
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                    <span>Generating...</span>
                  </div>
                ) : (
                  "Generate Specification"
                )}
              </button>
            </div>
          </div>
        ) : setupStep === "generating" && isGenerating ? (
          /* Loading State with Sequential Messages */
          <GeneratingLoader />
        ) : (
          /* Spec Generated - Show completion message */
          <div className="flex items-center justify-center h-full p-6">
            <div className="text-center">
              <div className="text-green-600 text-5xl mb-4">✓</div>
              <h3 className="text-xl font-semibold text-gray-800 mb-2">
                Specification Generated!
              </h3>
              <p className="text-gray-600">
                View and edit your specification in the document panel →
              </p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
